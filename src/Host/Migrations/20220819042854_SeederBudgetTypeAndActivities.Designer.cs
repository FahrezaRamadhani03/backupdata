// <auto-generated />
using System;
using Garuda.Database.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Garuda.Host.Migrations
{
    [DbContext(typeof(StorageContext))]
    [Migration("20220819042854_SeederBudgetTypeAndActivities")]
    partial class SeederBudgetTypeAndActivities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Garuda.Database.Framework.Models.Audits.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("ClassName")
                        .HasColumnType("text")
                        .HasColumnName("class_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("NewValue")
                        .HasColumnType("text")
                        .HasColumnName("new_value");

                    b.Property<string>("OldValue")
                        .HasColumnType("text")
                        .HasColumnName("old_value");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("audit_logs");
                });

            modelBuilder.Entity("Garuda.Modules.Auth.Models.Datas.ResetPasswordVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ResetPasswordVerification");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Administrator",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "QPB Administrator",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("fa997ce4-5b76-447c-9b08-5f448f185ad3"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Mine Head",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.GroupMenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanSubmit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUpdate")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanView")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuId");

                    b.ToTable("GroupMenuPermissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64f03301-c574-46c2-b1e6-2922eaaa826a"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("8f735cdf-bd01-4ae3-89c6-b122bdd59b8b"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b4ab5dec-b541-4a99-b998-511d093207cd"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("8f735cdf-bd01-4ae3-89c6-b122bdd59b8b"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2259be39-3027-4aaf-b7d4-6a5d7f196c0d"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("293f7746-eac8-4bd1-9550-87347467ebd2"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6607d37e-dc2b-4ea8-8de5-32bbf7d1ccd3"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("293f7746-eac8-4bd1-9550-87347467ebd2"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("fd27fabc-218a-4163-89ee-469f38611af3"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7c5ab91a-5a1b-4b52-a643-ade5b42f862c"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("246857d8-d23b-4287-9e70-bd3101ec4df8"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("9f54020e-85c1-46fb-9da3-c6150a3e327b"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("82ace0f9-6a4f-4a53-b524-306caf258b6d"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("08d3fe57-51f3-40d7-8cbc-75899871abf2"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2144142f-4fea-4e39-92c6-75097b01cd80"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("77af2b15-1d76-489c-89b7-8f003d19acff"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("cf5aa817-c923-40ea-9394-de0da2335866"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("9f54020e-85c1-46fb-9da3-c6150a3e327b"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("77b62aa0-5794-41fb-9005-a197c50385e0"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("08d3fe57-51f3-40d7-8cbc-75899871abf2"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("db5c3fdc-6d75-42a5-97bb-2a0edfbfe45a"),
                            CanCreate = true,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("77af2b15-1d76-489c-89b7-8f003d19acff"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("07e87c49-180f-4f00-99e2-7322c0638a2d"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("f0663ca2-ffb8-42c2-b022-38479c7c84af"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("e59e9251-d424-4ae1-b0c7-bdd01a4a1fee"),
                            CanCreate = false,
                            CanDelete = false,
                            CanSubmit = false,
                            CanUpdate = false,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("f0663ca2-ffb8-42c2-b022-38479c7c84af"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("702e4653-2abc-41f1-86f5-c1543ab7d585"),
                            CanCreate = true,
                            CanDelete = true,
                            CanSubmit = false,
                            CanUpdate = true,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            MenuId = new Guid("5026c85e-04f4-4d65-9fd2-bff26ad90013"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6d8a282b-2728-4c07-a28f-93ac06977ef6"),
                            CanCreate = true,
                            CanDelete = true,
                            CanSubmit = false,
                            CanUpdate = true,
                            CanView = true,
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            MenuId = new Guid("5026c85e-04f4-4d65-9fd2-bff26ad90013"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Level")
                        .HasMaxLength(500)
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f735cdf-bd01-4ae3-89c6-b122bdd59b8b"),
                            Code = "dash",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Dashboard",
                            DisplayOrder = 0,
                            IconClass = "icon-home",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "/Dashboard",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("293f7746-eac8-4bd1-9550-87347467ebd2"),
                            Code = "cr",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Create",
                            DisplayOrder = 1,
                            IconClass = "icon-add",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            Code = "cp",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Create Plan",
                            DisplayOrder = 0,
                            IconClass = "",
                            Level = 1,
                            ParentId = new Guid("293f7746-eac8-4bd1-9550-87347467ebd2"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("9f54020e-85c1-46fb-9da3-c6150a3e327b"),
                            Code = "cp",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Plan Mine Closure",
                            DisplayOrder = 0,
                            IconClass = "",
                            Level = 2,
                            ParentId = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            Slug = "/CreatePlanMineClosure",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("08d3fe57-51f3-40d7-8cbc-75899871abf2"),
                            Code = "cp",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Plan Operation",
                            DisplayOrder = 1,
                            IconClass = "",
                            Level = 2,
                            ParentId = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            Slug = "/CreatePlanOperation",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("77af2b15-1d76-489c-89b7-8f003d19acff"),
                            Code = "cp",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Plan Contractor",
                            DisplayOrder = 2,
                            IconClass = "",
                            Level = 2,
                            ParentId = new Guid("f1e6588e-ef55-4fcd-9be2-ad71fce2e678"),
                            Slug = "/CreatePlanContractor",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("6906ffec-78d6-4631-977d-b0375351fb70"),
                            Code = "cr",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Create Actual",
                            DisplayOrder = 1,
                            IconClass = "icon-add",
                            Level = 1,
                            ParentId = new Guid("293f7746-eac8-4bd1-9550-87347467ebd2"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("77118193-d70c-4e36-97a0-683b9e825569"),
                            Code = "act",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "My Activity",
                            DisplayOrder = 2,
                            IconClass = "icon-notes",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7f2302be-efd5-43f1-b6c9-8e8886c8460c"),
                            Code = "doc",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "My Document",
                            DisplayOrder = 3,
                            IconClass = "icon-file",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d73f2bc0-8b65-46f2-9e06-9bd52e990283"),
                            Code = "doclib",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Document Library",
                            DisplayOrder = 4,
                            IconClass = "icon-search",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("806f809b-cdd3-4591-a553-085ac97037b9"),
                            Code = "vplan",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "View Plan",
                            DisplayOrder = 0,
                            IconClass = "",
                            Level = 1,
                            ParentId = new Guid("d73f2bc0-8b65-46f2-9e06-9bd52e990283"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("049dde67-5798-4e74-8fff-503400311161"),
                            Code = "vact",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "View Actual",
                            DisplayOrder = 1,
                            IconClass = "",
                            Level = 1,
                            ParentId = new Guid("d73f2bc0-8b65-46f2-9e06-9bd52e990283"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f0663ca2-ffb8-42c2-b022-38479c7c84af"),
                            Code = "set",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "Profile",
                            DisplayOrder = 5,
                            IconClass = "icon-cog-outline",
                            Level = 0,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Slug = "",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5026c85e-04f4-4d65-9fd2-bff26ad90013"),
                            Code = "user",
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DisplayName = "User Management",
                            DisplayOrder = 0,
                            IconClass = "icon-user",
                            Level = 1,
                            ParentId = new Guid("f0663ca2-ffb8-42c2-b022-38479c7c84af"),
                            Slug = "/IndexUser",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Scheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Schemes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("045a0ec7-04e9-4136-b0a6-5ef1d529ea92"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Contractor",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("77c9ef27-2f65-473e-8b61-ff4ce9693655"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Mine Closure",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Operation",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.SchemeUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SchemeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("SchemeId");

                    b.HasIndex("UnitId");

                    b.ToTable("SchemeUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d086072c-4a06-402e-a735-11d5b034a866"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("045a0ec7-04e9-4136-b0a6-5ef1d529ea92"),
                            UnitId = new Guid("21cf75f0-c7c6-427b-a392-fce59cb50bc6"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("8e4b6643-4b95-4051-9dc8-5fc2a2ab727f"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("77c9ef27-2f65-473e-8b61-ff4ce9693655"),
                            UnitId = new Guid("5b11f06f-426b-44f1-9023-170cb85797e3"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b61b1d7d-ee3c-4eae-af2b-49c0e2415449"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            UnitId = new Guid("80f560d6-1f61-460e-95ac-ea5b9c001df5"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("51f35363-b1ef-4fbd-9021-224cf52c3bd3"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            UnitId = new Guid("29ec8ffc-c508-4dd5-8c3d-4675ed6af4cc"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c28fc63a-ab3b-4cfa-b246-243f35ffc552"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            UnitId = new Guid("b1f30d87-b5a6-4fdb-9f72-76f06db7f7a5"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("842147f1-c5fa-40ce-96f0-561dda8d7ad9"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            UnitId = new Guid("23ebbe54-45aa-4435-935d-6fad0d650b86"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("21fb0208-60a4-4827-8451-c597b54cad74"),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            SchemeId = new Guid("5db13726-605c-4a00-b1c4-d6ce3ba507b3"),
                            UnitId = new Guid("af82ee9b-e754-4cb5-ae58-213419183dcf"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Units");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80f560d6-1f61-460e-95ac-ea5b9c001df5"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "IMM",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("23ebbe54-45aa-4435-935d-6fad0d650b86"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Melak",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b1f30d87-b5a6-4fdb-9f72-76f06db7f7a5"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "KTD EMB",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("21cf75f0-c7c6-427b-a392-fce59cb50bc6"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "TRUST",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("29ec8ffc-c508-4dd5-8c3d-4675ed6af4cc"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "JBG",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("5b11f06f-426b-44f1-9023-170cb85797e3"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "KTD TDM",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("af82ee9b-e754-4cb5-ae58-213419183dcf"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "GPK",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Fullname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "system@system.co",
                            Fullname = "System",
                            IsActive = true,
                            Password = "$2a$11$ijs7c9x9yHz1oeZ95CF76u1CGALKC3sVeMpGyfzA0U7gWlpH7tmhO",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "systemadmin"
                        },
                        new
                        {
                            Id = new Guid("fa3876d9-b8ce-4029-9df6-2e8ee94a3d78"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Email = "systemreserve@system.co",
                            Fullname = "System Admin Reserve",
                            IsActive = true,
                            Password = "$2a$11$ijs7c9x9yHz1oeZ95CF76u1CGALKC3sVeMpGyfzA0U7gWlpH7tmhO",
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Username = "systemadminreserve"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5c455f1-f239-4f29-bebd-8bc4239e15fb"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("81314787-537b-474f-999a-9152c9703bbb")
                        },
                        new
                        {
                            Id = new Guid("ec211d37-2400-4877-8696-62ac17faeecb"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("2446aa92-3c84-4072-8c5e-d8c41deac9c4")
                        },
                        new
                        {
                            Id = new Guid("f1a56c59-0128-4799-826d-50ce44921cb6"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("fa997ce4-5b76-447c-9b08-5f448f185ad3"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("2446aa92-3c84-4072-8c5e-d8c41deac9c4")
                        },
                        new
                        {
                            Id = new Guid("4b894dac-7e06-4891-8498-6521ba85dcac"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("8b3c44cb-244b-4f13-b2a0-22020ae26bc6")
                        },
                        new
                        {
                            Id = new Guid("145e7f39-120c-4cdd-baac-fbbd74b72a69"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("fa997ce4-5b76-447c-9b08-5f448f185ad3"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("8b3c44cb-244b-4f13-b2a0-22020ae26bc6")
                        },
                        new
                        {
                            Id = new Guid("10195c34-4e6d-4795-bbde-bbd17e2c1b0b"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("fa997ce4-5b76-447c-9b08-5f448f185ad3"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("d050c114-fc5f-45c8-a736-b0cacdfc47e6"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("1ce881eb-4ae2-4b04-83d9-7062e6cfffd5"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("fe9b8375-2bab-4449-88a1-efe80155054e"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            GroupId = new Guid("9ee09365-b140-4bc0-a5a1-79098ddbeed7"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.UserSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateRevoked")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Jti")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.UserUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("UserUnits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a3f3920a-6ac6-4774-9b73-ef58c346e0df"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("80f560d6-1f61-460e-95ac-ea5b9c001df5"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("8f536667-9dcb-4ec4-96a9-8397b0dbf2c6"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("23ebbe54-45aa-4435-935d-6fad0d650b86"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("d280a08e-1090-4b71-8e7c-8dc391bddafc"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("b1f30d87-b5a6-4fdb-9f72-76f06db7f7a5"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("00a5ad59-340c-45cb-b423-51aaab6d4ee8"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("21cf75f0-c7c6-427b-a392-fce59cb50bc6"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("25ec2241-215e-4d2f-890a-88bad0f4127a"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("29ec8ffc-c508-4dd5-8c3d-4675ed6af4cc"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("57d4d61b-5814-4f7f-b00f-f5b5a1026908"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("5b11f06f-426b-44f1-9023-170cb85797e3"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        },
                        new
                        {
                            Id = new Guid("43e29254-3301-4b3c-a53b-2eaddb5aa4c3"),
                            CreatedBy = new Guid("81314787-537b-474f-999a-9152c9703bbb"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DeletedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UnitId = new Guid("af82ee9b-e754-4cb5-ae58-213419183dcf"),
                            UpdatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("b5a93e5d-e159-4c69-b90d-ae3239a692d3")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.Email.Models.Datas.TemplateEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplateEmails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Projection")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsShowInProjectExpense")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BudgetTypeId");

                    b.ToTable("BudgetActivities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531001"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531001"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Membeli Scanner barcode"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531002"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Jasa Konsultasi / SDM Luar"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531003"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Training Karyawan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531004"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Penambahan SDM"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531005"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "THR Karyawan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531006"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Bonus Tahunan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531007"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Pinjaman Karyawan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531008"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "BPJS Kesehatan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531009"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "BPJS Ketenaga kerjaan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531010"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "RND"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531011"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Project Internal"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531012"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531003"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Laba ditahan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531013"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Makan karyawan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531014"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Listrik"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531015"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya telpon dan internet"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531016"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Pemliharaan Bangunan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531017"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Pembelian Peralatan kerja"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531018"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya ATK & Materai"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531019"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Iuran & sumbangan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531020"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Akomodasi / transportasi"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531021"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Operasional Kas"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531022"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya sewa rumah"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531023"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya kesehatan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531024"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Baya SPT Tahunan"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531025"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya PPN"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531026"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Marketing"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531027"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Entertain"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-9daa96531028"),
                            BudgetTypeId = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsShowInProjectExpense = false,
                            Name = "Biaya Pendidikan"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetActivityId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BudgetAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BudgetPercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BudgetTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BudgetActivityId");

                    b.HasIndex("BudgetId");

                    b.HasIndex("BudgetTypeId");

                    b.ToTable("BudgetDetails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("BudgetTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-1daa96531001"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Property"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-1daa96531002"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Biaya SDM"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-1daa96531003"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Prive"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-1daa96531004"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeName = "Biaya Operasional"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-4daa96531001"),
                            Code = "BDG",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bandung",
                            ProvinceId = new Guid("d45cb8d2-435e-4661-89d5-6daa96531001")
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-4daa96531002"),
                            Code = "TGL",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tegal",
                            ProvinceId = new Guid("d45cb8d2-435e-4661-89d5-6daa96531002")
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InvoiceEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("InvoiceName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PICEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PICName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PICPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ContractInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ClientContractNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ClientFileName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("ClientFileNameOri")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GikContractNo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GikFileName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("GikFileNameOri")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("OtherInfo")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ContractInfo");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-5daa96531001"),
                            Code = "ID",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-5daa96531002"),
                            Code = "SG",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Singapura"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Developer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("RatePerDay")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DeveloperRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LevelId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("LevelId");

                    b.HasIndex("RoleId");

                    b.ToTable("DeveloperRoles");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentHoliday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("DevelopmentScrumSprintId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("HolidayDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DevelopmentScrumSprintId");

                    b.HasIndex("ProjectId");

                    b.ToTable("DevelopmentHoliday");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Leader")
                        .HasColumnType("boolean");

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("DevelopmentRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531001"),
                            Code = "PM",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = true,
                            Name = "Project manager"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531002"),
                            Code = "APM",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = true,
                            Name = "Acting Project Manager"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531003"),
                            Code = "TL",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = true,
                            Name = "Technical Leader"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531004"),
                            Code = "FE",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "Frontend Developer"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531005"),
                            Code = "BE",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "Backend Developer"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531006"),
                            Code = "MBL",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "Mobile Developer"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531007"),
                            Code = "BA",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "Business Analyst"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531008"),
                            Code = "SA",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "System Analyst"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-3daa96531009"),
                            Code = "QA",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Leader = false,
                            Level = "\"[\\\"Senior\\\",  \\\"Middle\\\",  \\\"Junior\\\"]\"",
                            Name = "Quality Assurance"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrum", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DaysInSprint")
                        .HasColumnType("text");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("DevelopmentScrum");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrumSprint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DayLength")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DevelopmentScrumId")
                        .HasColumnType("uuid");

                    b.Property<int>("HolidayLength")
                        .HasColumnType("integer");

                    b.Property<bool>("IsExtendDays")
                        .HasColumnType("boolean");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<DateTime>("SprintEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("SprintStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Sprintname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DevelopmentScrumId");

                    b.ToTable("DevelopmentScrumSprint");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentTeamRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DeveloperRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DevelopmentTeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperRoleId");

                    b.HasIndex("DevelopmentTeamId");

                    b.ToTable("DevelopmentTeamRoles");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-7daa96531001"),
                            CityId = new Guid("d45cb8d2-435e-4661-89d5-4daa96531001"),
                            Code = "SK",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sukajadi"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-7daa96531002"),
                            CityId = new Guid("d45cb8d2-435e-4661-89d5-4daa96531001"),
                            Code = "GG",
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sukasari"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("MarriedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MarriedStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("NumberOfChildern")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ResignDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActivityId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("BillAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TransactionDate")
                        .HasMaxLength(512)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ExpenseBill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseBills");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03b7613b-3a26-4810-b6e9-59d2591115c1"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tahun Baru Masehi"
                        },
                        new
                        {
                            Id = new Guid("03b7613b-3a26-4810-b6e9-59d2591115c2"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hari Raya Nyepi"
                        },
                        new
                        {
                            Id = new Guid("03b7613b-3a26-4810-b6e9-59d2591115c3"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Date = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Hari Buruh Internasional"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AdditionalDiscount")
                        .HasColumnType("numeric");

                    b.Property<string>("AdditionalNote")
                        .HasColumnType("text");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscountTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("Filename")
                        .HasColumnType("text");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsAdditionalDiscount")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OverdueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OverdueLength")
                        .HasColumnType("integer");

                    b.Property<string>("OverdueUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentTermId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceDetailTax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("TaxId");

                    b.ToTable("InvoiceDetailTaxes");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceFileHistories");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoicePayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Levels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1d19488-3437-42f1-beef-afe1a0518d62"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Junior"
                        },
                        new
                        {
                            Id = new Guid("e3c3dd70-e910-40b3-b2fb-8119e013b470"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Middle"
                        },
                        new
                        {
                            Id = new Guid("f7c0677f-40ba-414e-a2d8-851fd7f73b04"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Senior"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("InvoiceNote")
                        .HasColumnType("text");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TermNo")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PaymentTerms");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTermTax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PaymentTermId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaxId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PaymentTermId");

                    b.HasIndex("TaxId");

                    b.ToTable("PaymentTermTaxes");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DevelopmentEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DevelopmentMethod")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("DevelopmentStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InitState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("KickoffDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("MaintenanceEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MaintenanceLength")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("MaintenanceStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MaintenanceUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("OverdueLength")
                        .HasColumnType("integer");

                    b.Property<string>("OverdueUnit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PICEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PICName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PICPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Technology")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfCoorporation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDevelopmentTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DeveloperId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("boolean");

                    b.Property<decimal>("ManADay")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ManDays")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDevelopmentTeams");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentDesc")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("FileNameOri")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("FileSource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectHistories");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectResources", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Level")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RoleId");

                    b.ToTable("ProjectResources");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectSPK", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("FileNameOri")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("ProjectHistoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("SPKDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SPKNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectHistoryId");

                    b.ToTable("ProjectSPK");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectScrumTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PoDeveloper")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SmDeveloperId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SmDeveloperId");

                    b.ToTable("ProjectScrumTeams");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameOri")
                        .HasColumnType("text");

                    b.Property<decimal>("ProjectAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProposalHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("text");

                    b.Property<string>("FileNameOri")
                        .HasColumnType("text");

                    b.Property<int>("ProjectAmount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProposalNo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Remark")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProposalHistories");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-6daa96531001"),
                            Code = "JB",
                            CountryId = new Guid("d45cb8d2-435e-4661-89d5-5daa96531001"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jawa Barat"
                        },
                        new
                        {
                            Id = new Guid("d45cb8d2-435e-4661-89d5-6daa96531002"),
                            Code = "JT",
                            CountryId = new Guid("d45cb8d2-435e-4661-89d5-5daa96531001"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jawa Tengah"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Tax", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("Taxes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a69de34-7b4a-4c92-8644-bd78182bb9c7"),
                            Code = "T",
                            CreatedDate = new DateTime(2022, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "PPN",
                            Rate = 10m
                        },
                        new
                        {
                            Id = new Guid("c0327584-6c87-4db2-9c8f-a0aeba523180"),
                            Code = "P",
                            CreatedDate = new DateTime(2022, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "PPh 23",
                            Rate = 2m
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Technology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Technologies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03b7613b-3a26-4810-b6e9-59d2591115c6"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vue"
                        },
                        new
                        {
                            Id = new Guid("4ac682e1-bb55-4432-98f6-a392ad922183"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Node Js"
                        },
                        new
                        {
                            Id = new Guid("ec1698a2-1ba0-4b47-8c49-24470e231122"),
                            CreatedDate = new DateTime(2022, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "React"
                        });
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.TemplateReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BodyDetail")
                        .HasColumnType("text");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<string>("Head")
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TemplateReports");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.GroupMenuPermission", b =>
                {
                    b.HasOne("Garuda.Modules.Common.Models.Datas.Group", "Group")
                        .WithMany("GroupMenuPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.Common.Models.Datas.Menu", "Menu")
                        .WithMany("GroupMenuPermissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.SchemeUnit", b =>
                {
                    b.HasOne("Garuda.Modules.Common.Models.Datas.Scheme", "Scheme")
                        .WithMany("SchemeUnits")
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.Common.Models.Datas.Unit", "Unit")
                        .WithMany("SchemeUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheme");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.UserGroup", b =>
                {
                    b.HasOne("Garuda.Modules.Common.Models.Datas.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.Common.Models.Datas.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.UserUnit", b =>
                {
                    b.HasOne("Garuda.Modules.Common.Models.Datas.Unit", "Unit")
                        .WithMany("UserUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.Common.Models.Datas.User", "User")
                        .WithMany("UserUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetActivity", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.BudgetType", "BudgetType")
                        .WithMany("BudgetActivities")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetType");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetDetail", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.BudgetActivity", "BudgetActivity")
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Budget", "Budget")
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.BudgetType", "BudgetType")
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("BudgetActivity");

                    b.Navigation("BudgetType");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.City", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ContractInfo", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("ContractInfo")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Developer", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Client", "Client")
                        .WithMany("Developers")
                        .HasForeignKey("ClientId");

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Employee", "Employee")
                        .WithMany("Developers")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Client");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DeveloperRole", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Developer", "Developer")
                        .WithMany("DeveloperRoles")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentRole", "DevelopmentRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("DevelopmentRole");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentHoliday", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrumSprint", "DevelopmentScrumSprint")
                        .WithMany()
                        .HasForeignKey("DevelopmentScrumSprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("DevelopmentHolidays")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevelopmentScrumSprint");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrum", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("DevelopmentScrums")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrumSprint", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrum", "DevelopmentScrum")
                        .WithMany("DevelopmentScrumSprints")
                        .HasForeignKey("DevelopmentScrumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevelopmentScrum");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentTeamRole", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.DeveloperRole", "DeveloperRole")
                        .WithMany()
                        .HasForeignKey("DeveloperRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDevelopmentTeam", "ProjectDevelopmentTeam")
                        .WithMany("DevelopmentTeamRoles")
                        .HasForeignKey("DevelopmentTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeveloperRole");

                    b.Navigation("ProjectDevelopmentTeam");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.District", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Employee", b =>
                {
                    b.HasOne("Garuda.Modules.Common.Models.Datas.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Expense", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.BudgetActivity", "BudgetActivity")
                        .WithMany("Expenses")
                        .HasForeignKey("ActivityId");

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("Expenses")
                        .HasForeignKey("ProjectId");

                    b.Navigation("BudgetActivity");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ExpenseBill", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Expense", "Expense")
                        .WithMany("ExpenseBills")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTerm", "PaymentTerm")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentTermId");

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("Invoices")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentTerm");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceDetail", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceDetailTax", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", "Invoice")
                        .WithMany("InvoiceDetailTaxes")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Tax", "Tax")
                        .WithMany("InvoiceDetailTaxes")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoiceFileHistory", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", "Invoice")
                        .WithMany("InvoiceFileHistories")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.InvoicePayment", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Bank", "Bank")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", "Invoice")
                        .WithMany("InvoicePayments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Notification", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Employee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTerm", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("PaymentTerms")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTermTax", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTerm", "PaymentTerm")
                        .WithMany("PaymentTermTaxes")
                        .HasForeignKey("PaymentTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Tax", "Tax")
                        .WithMany("PaymentTermTax")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentTerm");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Client", "Client")
                        .WithMany("ProjectDetails")
                        .HasForeignKey("ClientId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDevelopmentTeam", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Developer", "Developer")
                        .WithMany("ProjectDevelopmentTeams")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("ProjectDevelopmentTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectFile", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectHistory", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("ProjectHistories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectResources", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("ProjectResources")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentRole", "DevelopmentRole")
                        .WithMany("ProjectResources")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevelopmentRole");

                    b.Navigation("ProjectDetail");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectSPK", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectHistory", "ProjectHistory")
                        .WithMany("ProjectSPKs")
                        .HasForeignKey("ProjectHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectHistory");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectScrumTeam", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "ProjectDetail")
                        .WithMany("ProjectScrumTeams")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Developer", "SmDeveloper")
                        .WithMany()
                        .HasForeignKey("SmDeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectDetail");

                    b.Navigation("SmDeveloper");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Proposal", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("Proposals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProposalHistory", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", "Project")
                        .WithMany("ProposalHistories")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Province", b =>
                {
                    b.HasOne("Garuda.Modules.ProjectManagement.Models.Datas.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Group", b =>
                {
                    b.Navigation("GroupMenuPermissions");

                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Menu", b =>
                {
                    b.Navigation("GroupMenuPermissions");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Scheme", b =>
                {
                    b.Navigation("SchemeUnits");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.Unit", b =>
                {
                    b.Navigation("SchemeUnits");

                    b.Navigation("UserUnits");
                });

            modelBuilder.Entity("Garuda.Modules.Common.Models.Datas.User", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("UserUnits");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Bank", b =>
                {
                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Budget", b =>
                {
                    b.Navigation("BudgetDetails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetActivity", b =>
                {
                    b.Navigation("BudgetDetails");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.BudgetType", b =>
                {
                    b.Navigation("BudgetActivities");

                    b.Navigation("BudgetDetails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.City", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Client", b =>
                {
                    b.Navigation("Developers");

                    b.Navigation("ProjectDetails");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Country", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Developer", b =>
                {
                    b.Navigation("DeveloperRoles");

                    b.Navigation("ProjectDevelopmentTeams");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentRole", b =>
                {
                    b.Navigation("ProjectResources");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.DevelopmentScrum", b =>
                {
                    b.Navigation("DevelopmentScrumSprints");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Employee", b =>
                {
                    b.Navigation("Developers");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Expense", b =>
                {
                    b.Navigation("ExpenseBills");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoiceDetailTaxes");

                    b.Navigation("InvoiceFileHistories");

                    b.Navigation("InvoicePayments");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.PaymentTerm", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PaymentTermTaxes");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDetail", b =>
                {
                    b.Navigation("ContractInfo");

                    b.Navigation("DevelopmentHolidays");

                    b.Navigation("DevelopmentScrums");

                    b.Navigation("Expenses");

                    b.Navigation("Invoices");

                    b.Navigation("Notifications");

                    b.Navigation("PaymentTerms");

                    b.Navigation("ProjectDevelopmentTeams");

                    b.Navigation("ProjectFiles");

                    b.Navigation("ProjectHistories");

                    b.Navigation("ProjectResources");

                    b.Navigation("ProjectScrumTeams");

                    b.Navigation("ProposalHistories");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectDevelopmentTeam", b =>
                {
                    b.Navigation("DevelopmentTeamRoles");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.ProjectHistory", b =>
                {
                    b.Navigation("ProjectSPKs");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Garuda.Modules.ProjectManagement.Models.Datas.Tax", b =>
                {
                    b.Navigation("InvoiceDetailTaxes");

                    b.Navigation("PaymentTermTax");
                });
#pragma warning restore 612, 618
        }
    }
}
